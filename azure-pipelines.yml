jobs:
  - job: validateshaders
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: 'Validate shaders'
    steps:
    - script: |
        sudo apt-get update -y
        sudo apt-get install -y glslang-tools
        cd ci_shadervalidator
        ./build.sh
      displayName: 'Install dependencies'
    - script: |
        cd ci_shadervalidator
        ./validateshaders
      displayName: 'Validate shaders'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'shaders'
        artifactName: shaders
      displayName: 'Publish shaders'

  - job: ubuntu1604
    pool:
      vmImage: 'Ubuntu-16.04'
    displayName: 'Ubuntu 16.04 x86-64'
    steps:
    - script: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update -y
        sudo apt-get install -y libglfw3-dev python2.7-dev libpng16-dev libopenal-dev libluajit-5.1-dev libserialport-dev libsndfile1-dev
        sudo apt-get install -y gcc-8 g++-8
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 100
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100
        cd ref
        git clone "https://github.com/chriskohlhoff/asio" --depth 1 --branch asio-1-12-2 -q
      displayName: 'Install dependencies'
    - script: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_ZMQ=OFF -DWITH_OPENVR=OFF
        cmake --build .
      displayName: 'Build'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/bin'
        artifactName: binaries_linux
      displayName: 'Publish binaries'

  - job: macos1015
    pool:
      vmImage: 'macOS-10.15'
    displayName: 'MacOS 10.15 x86-64'
    steps:
    - script: |
        sudo xcode-select -s /Applications/Xcode_12.3.app
      displayName: 'Setup Xcode'
    - script: |
        cd /tmp
        git clone https://github.com/microsoft/vcpkg
        cd vcpkg
        git remote add milek https://github.com/Milek7/vcpkg
        git fetch milek
        git checkout c0020eb4
        ./bootstrap-vcpkg.sh
        ./vcpkg install glfw3:x64-osx libpng:x64-osx libsndfile:x64-osx asio:x64-osx
        git cherry-pick 9b7f342
        git cherry-pick f1b4a0e
        MACOSX_DEPLOYMENT_TARGET="10.12" ./vcpkg install luajit:x64-osx
      displayName: 'Install dependencies'
    - script: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_TOOLCHAIN_FILE=/tmp/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-osx -DWITH_ZMQ=OFF -DWITH_OPENVR=OFF -DWITH_UART=OFF
        cmake --build .
      displayName: 'Build'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/bin'
        artifactName: binaries_macos
      displayName: 'Publish binaries'

  - job: macos11_arm64
    pool:
      vmImage: 'macOS-10.15'
    displayName: 'MacOS 11.1 ARM64'
    steps:
    - script: |
        sudo xcode-select -s /Applications/Xcode_12.3.app
      displayName: 'Setup Xcode'
    - script: |
        cd /tmp
        git clone https://github.com/microsoft/vcpkg
        cd vcpkg
        git remote add milek https://github.com/Milek7/vcpkg
        git fetch milek
        git checkout c0020eb4
        ./bootstrap-vcpkg.sh
        ./vcpkg install glfw3:arm64-osx libpng:arm64-osx libsndfile:arm64-osx asio:arm64-osx
        git cherry-pick 9b7f342
        git cherry-pick ea5d2d7
        ./vcpkg install luajit:arm64-osx
      displayName: 'Install dependencies'
    - script: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_TOOLCHAIN_FILE=/tmp/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=arm64-osx -DWITH_ZMQ=OFF -DWITH_OPENVR=OFF -DWITH_UART=OFF
        cmake --build .
      displayName: 'Build'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/bin'
        artifactName: binaries_macos_arm64
      displayName: 'Publish binaries'

  - job: windows_x64
    pool:
      vmImage: 'vs2017-win2016'
    displayName: 'Windows VS2017 x86-64'
    steps:
    - script: |
        cd ref
        git clone "https://github.com/chriskohlhoff/asio" --depth 1 --branch asio-1-12-2 -q
      displayName: 'Download extra dependencies'
    - script: |
        mkdir build
        cd build
        cmake .. -A x64
        cmake --build . --config RelWithDebInfo
      displayName: 'Build'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/bin'
        artifactName: binaries_win64
      displayName: 'Publish binaries'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/pdb'
        artifactName: binaries_win64
      displayName: 'Publish symbols'

  - job: windows_x64_dbg
    pool:
      vmImage: 'vs2017-win2016'
    displayName: 'Windows VS2017 Debug'
    steps:
    - script: |
        cd ref
        git clone "https://github.com/chriskohlhoff/asio" --depth 1 --branch asio-1-12-2 -q
      displayName: 'Download extra dependencies'
    - script: |
        mkdir build
        cd build
        cmake .. -A x64
        cmake --build . --config Debug
      displayName: 'Build'

  - job: windows_x32
    pool:
      vmImage: 'vs2017-win2016'
    displayName: 'Windows VS2017 x86'
    steps:
    - script: |
        cd ref
        git clone "https://github.com/chriskohlhoff/asio" --depth 1 --branch asio-1-12-2 -q
      displayName: 'Download extra dependencies'
    - script: |
        mkdir build
        cd build
        cmake .. -A Win32 -T v141_xp
        cmake --build . --config RelWithDebInfo
      displayName: 'Build'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/bin'
        artifactName: binaries_win32
      displayName: 'Publish binaries'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/pdb'
        artifactName: binaries_win32
      displayName: 'Publish symbols'
